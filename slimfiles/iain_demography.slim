//Paremeterization 1

initialize()
{

    // scaling factors and other constants
    defineConstant("scalingFactor", 1);

    defineConstant("subpopSize", 10000*scalingFactor);
    
    defineConstant("physLen", 100000);
    defineConstant("mutLoc", asInteger(physLen/2));

    defineConstant("samplingInterval", 10*scalingFactor);
    defineConstant("burnTime", 20*subpopSize);
    defineConstant("mutTime", burnTime*scalingFactor);
    
    defineConstant("selCoeffRunTime", 50*scalingFactor);
    defineConstant("selChangeGen", mutTime + selCoeffRunTime);
    defineConstant("simEndTime", selChangeGen + selCoeffRunTime);
    
    // sim elements
    initializeMutationRate(1e-7/scalingFactor);
    initializeRecombinationRate(1e-7/scalingFactor);
    defineConstant("selCoeff", 0.02/scalingFactor);

    initializeMutationType("m1", 0.5, "f", selCoeff);
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, physLen-1);
} 

// add mut after burn-in
s1 1 late()
{
    // introduce mutation with initial sel coefficient
    target = sample(p1.genomes, 1);
    target.addNewDrawnMutation(m1, 50000);
    cat("Added mutation with beginning selection coefficient of " + selCoeff + " at generation: " + sim.generation + "\n\n");
}

// adjust sign of selection coefficient
s2 50 late()
{
    //adjust sel coef 
    muts = sim.mutationsOfType(m1);
        if (size(muts))
        {
            mut = NULL;
            minDist = physLen+1;
            for (m in muts)
            {
                dist = abs(m.position-mutLoc);
                if (dist < minDist)
                {
                    minDist = dist;
                    mut = m;
                }
            }

            mut.setSelectionCoeff(0-selCoeff);
            cat(simID + ": chose polymorphism at position " + mut.position + " and frequency " + sim.mutationFrequencies(p1, mut) + " to become detrimental at generation " + sim.generation + "\n\n");
        }
        else
        {
            cat(simID + ": failed to switch from positive to detrimental at gen " + sim.generation + "\n");
        }

}

s3 1:100 late()
{
    if (sim.generation % samplingInterval == 0)
    {
        p1.outputMSSample(100);
    }
}

s4 100 late()
{
    sim.simulationFinished();
}

// main 
1
{
    sim.addSubpop("p1", subpopSize);

    sim.rescheduleScriptBlock(s1, start=mutTime, end=mutTime);
    sim.rescheduleScriptBlock(s2, start=mutTime, end=selChangeGen);
    sim.rescheduleScriptBlock(s3, start=mutTime, end=simEndTime);
    sim.rescheduleScriptBlock(s4, start=simEndTime, end=simEndTime);
}
