#!/bin/bash
import multiprocessing as mp
import numpy as np

#! THIS SNAKEFILE IS INTENDED FOR USE WITH PAIRED-END SEQ FROM 1KG

(ACC_NUM,) = glob_wildcards("raw_data/{acc_nums}_1.fastq")


rule all:
    input:
        expand("results/{acc_num}.slim", acc_num=ACC_NUM),


rule DownloadRef:
    output:
        expand("../GRCh37/raw/chr{chrom}.fa", chrom=range(1, 23)),
    shell:
        """
        for i in {1..22}
        do
            wget https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh37.p13/Primary_Assembly/assembled_chromosomes/FASTA/chr${{i}}.fa.gz -P ../GRCh37/raw
        done
        """


rule DownloadMasks:
    output:
        expand(
            "/../GRCh37/ref_mask_files/hs37d5_chr{chrom}mask.bed", chrom=range(1, 23)
        ),
    shell:
        """
        cd /../GRCh37/ref_mask_files/
        wget https://shh-cloud.gnz.mpg.de/index.php/s/2Z6wxNbEwxM6ERK/download | unzip
        """


rule CleanRefs:
    """
    Renames chromosomes from the GRCh37 release to be consistent with the aligned chromosomes from the study.
    """
    input:
        "../GRCh37/raw/chr{chrom}.fa",
    output:
        "../GRCh37/cleaned/chr{chrom}.renamed.fa",
    run:
        from glob import glob

        for fafile in input:
            with open(fafile, "r") as ifile:
                falines = [j.strip() for j in ifile.readlines()]

            chrom_id = fafile.split("/")[-1].split(".")[0].split("chr")[-1]
            falines[0] = falines[0].replace(">", "")
            falines[0] = ">" + chrom_id + " " + falines[0]
            cleaned = falines[0] + "\n", "".join(falines[1:] + ["\n"])

            with open(
                f"../GRCh37/cleaned/chr{wildcards.chrom}.renamed.fa", "w+"
            ) as ofile:
                ofile.writelines(cleaned)


rule JoinRefs:
    input:
        expand("../GRCh37/cleaned/chr{chrom}.renamed.fa", chrom=range(1, 23)),
    output:
        "../GRCh37/GRCh37.all.fa",
    shell:
        """
        cat {input} > {output}
        bwa index {output}
        """


rule Trim:
    input:
        r1="raw_data/{acc_num}_1.fastq",
        r2="raw_data/{acc_num}_2.fastq",
    output:
        tr_r1="trimmed/{acc_num}_1.trimmed.fastq",
        tr_r2="trimmed/{acc_num}_2.trimmed.fastq",
    shell:
        """
        fastp --in1 {input.r1} --in2 {input.r2} --out1 {output.tr_r1} --out2 {output.tr_r2}
        """


rule Align:
    input:
        ref="../GRCh37/GRCh37.all.fa",
        r1="trimmed/{acc_num}_1.trimmed.fastq",
        r2="trimmed/{acc_num}_2.trimmed.fastq",
    output:
        bamfile="bams/{acc_num}_GRCh37_sorted.bam",
    params:
        threads=2,
    shell:
        """
        bwa mem -t {params.threads} ../GRCh37/GRCh37.all.fa {input.r1} {input.r2} | 
            samtools view -S -b | 
            samtools sort > {output.bamfile}
        """


rule Index:
    input:
        bamfile="bams/{acc_num}_GRCh37_sorted.bam",
    output:
        bai="bams/{acc_num}_GRCh37_sorted.bam.bai",
    shell:
        """
        samtools index {input.bamfile}
        """


rule Pileup:
    input:
        bamfile="bams/{acc_num}_GRCh37_sorted.bam",
        bai="bams/{acc_num}_GRCh37_sorted.bam.bai",
        ref="../GRCh37/GRCh37.all.fa",
    output:
        map_mask="chrom_mask_files/{acc_num}/chrom{chrom}_mappability_mask.bed.gz",
        vcf="chrom_vcfs/{acc_num}/{chrom}.vcf.gz",
    shell:
        """
        mean_cov=$(samtools depth {input.bamfile} \
            -r {wildcards.chrom}  | 
            awk '{{sum += $3}} END {{print sum / NR}}')

        echo "Mean coverage: $mean_cov"

        bcftools mpileup \
            -q 20 \
            -Q 20 \
            -C 50 \
            -r {wildcards.chrom} \
            -f {input.ref} \
            {input.bamfile} | 
            bcftools call -c -V indels |
            ../msmc-tools/bamCaller.py $mean_cov {output.map_mask} |
            gzip -c > {output.vcf}
        """


rule PrepFiles:
    input:
        ref_mask="../GRCh37/ref_mask_files/hs37d5_chr{chrom}.mask.bed",
        map_mask="chrom_mask_files/{acc_num}/chrom{chrom}_mappability_mask.bed.gz",
        vcf="chrom_vcfs/{acc_num}/{chrom}.vcf.gz",
    output:
        "chrom_msmc/{acc_num}_chrom{chrom}.txt",
    shell:
        """
        ../msmc-tools/generate_multihetsep.py \
            --mask={input.ref_mask} \
            --mask={input.map_mask} \
            {input.vcf} > {output}
        """


rule RunMSMC:
    input:
        all_vcfs=expand("chrom_msmc/{{acc_num}}_chrom{chrom}.txt", chrom=range(1, 23)),
    output:
        "results/{acc_num}.final.txt",
    params:
        dummy_dir="results/{acc_num}",
    shell:
        """
        ../msmc \
            -o {params.dummy_dir} \
            {input}
        """


rule ConvertMSMC2MS:
    input:
        "results/{acc_num}.final.txt",
    output:
        "results/{acc_num}.ms",
    params:
        dummy_dir="results/{acc_num}",
    shell:
        """
        ../msmc-tools/msmc2ms.py --form snps {params.dummy_dir} >> {output}
        sed -i -e 's/^/ms /' {output}
        """



rule ConvertMS2SLiM:
    input:
        "results/{acc_num}.ms",
    output:
        "results/{acc_num}.slim",
    shell:
        """
        mscmd=$(cat {input})
        echo $ms
        python ../msCmdToSlimScript.py \
            -N 10000 \
            -L 1000000 \
            -b 200 \
            -ms $mscmd > {output}
        """


rule PlotMSMC:
    input:
        msmc_out="results/{acc_num}_msmc_out.final.txt",
    output:
        "{acc_num}_msmc_out.png",
    shell:
        """
        python ../plot_msmc.py {input.msmc_out}
        """
