#!/bin/bash


rule all:
    input:
        "S14194_msmc_out",


rule DownloadRef:
    output:
        expand("GRCh37/chr{chrom}.fa", chrom=range(1, 23)),
    shell:
        """
        for i in {1..22}
        do
            wget https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh37.p13/Primary_Assembly/assembled_chromosomes/FASTA/chr${{i}}.fa.gz
        done
        """


rule CleanRefs:
    """
    Renames chromosomes from the GRCh37 release to be consistent with the aligned chromosomes from the study.
    """
    input:
        "GRCh37/chr{chrom}.fa",
    output:
        "GRCh37/chr{chrom}.renamed.fa",
    run:
        from glob import glob

        for fafile in input:
            with open(fafile, "r") as ifile:
                falines = [j.strip() for j in ifile.readlines()]

            chrom_id = fafile.split("/")[-1].split(".")[0].split("chr")[-1]
            falines[0] = falines[0].replace(">", "")
            falines[0] = ">" + chrom_id + " " + falines[0]
            cleaned = falines[0] + "\n", ''.join(falines[1:] + ["\n"])

            with open(f"GRCh37/chr{wildcards.chrom}.renamed.fa", "w+") as ofile:
                ofile.writelines(cleaned)

rule JoinRefs:
    input:
        expand("GRCh37/chr{chrom}.renamed.fa", chrom=range(1, 23)),
    output:
        "GRCh37/GRCh37.all.fa"
    shell:
        """
        cat {input} > {output}
        """

rule Pileup:
    input:
        bamfile="single_pop_samp/S14194.Y1.E1.L1.1240k_plus.hg19.v1.bam",
        ref="GRCh37/GRCh37.all.fa",
    output:
        map_mask="single_pop_samp/S14194_chrom{chrom}_mappability_mask.bed.gz",
        vcf="single_pop_samp/S14194_chrom{chrom}.vcf.gz",
    shell:
        """
        mean_cov=$(samtools depth {input.bamfile} \
            -r {wildcards.chrom}  | 
            awk '{{sum += $3}} END {{print sum / NR}}')
        
        echo "Mean coverage: $mean_cov"

        bcftools mpileup \
            -r {wildcards.chrom} \
            -f {input.ref} \
            {input.bamfile} | 
            bcftools call -c -V indels |
            ./msmc-tools/bamCaller.py $mean_cov {output.map_mask} |
            gzip -c > {output.vcf}
        """


rule PrepFiles:
    input:
        ref_mask="ref_masks/hs37d5_chr{chrom}.mask.bed",
        map_mask="single_pop_samp/S14194_chrom{chrom}_mappability_mask.bed.gz",
        vcf="single_pop_samp/S14194_chrom{chrom}.vcf.gz",
    output:
        "single_pop_samp/S14194_chrom{chrom}.txt",
    shell:
        """
        ./msmc-tools/generate_multihetsep.py \
            --mask={input.ref_mask} \
            --mask={input.map_mask} \
            {input.vcf} > {output}
        """


rule RunMSMC:
    input:
        all_vcfs=expand("single_pop_samp/S14194_chrom{chrom}.txt", chrom=range(1, 23)),
    output:
        directory("single_pop_samp/S14194_msmc_out"),
    shell:
        """
        ./msmc --fixedRecombination \
            -o  {output} \
            {input}
        """
