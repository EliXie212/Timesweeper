from glob import glob
import os
import sys
from haplotypes import samps_to_gens
from tqdm import tqdm

# Preprocessing on config file, make sure all necessary args are present in a way that makes sense
print("Base input directory:", config["base_sim_dir"])

base_dir = config["base_sim_dir"]

if config["samp_gens"] is not None:
    sample_gens = config["samp_gens"]
elif config["num_timepoints"] is not None:
    sample_gens = samps_to_gens(config["num_timepoints"], config["max_timepoints"])
else:
    print(
        "Must supply either list of generations or number of timepoints to uniformly sample in config file."
    )
    sys.exit(1)

print("Sampling schema:", config["samp_gens"])
print("Sample size:", config["sample_size"])

if config["schema_name"] is not None:
    schema_name = config["schema_name"]
else:
    schema_name = "schema-" + "-".join(
        [str(i) for i in sample_gens] + "_gens_" + config["sample_size"] + "_samps"
    )

print("Schema name:", schema_name)

# Get list of lowest-level subdirs containing replicates
SIMTYPES, BATCHES, _, __ = glob_wildcards(
    f"{base_dir}/{{simtype}}/{{batch}}/{{popsf}}/{{popd}}.pop"
)
SIMTYPES = list(set(SIMTYPES))
BATCHES = list(set(BATCHES))

rule all:
    input:
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps_predictions.csv",
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps1Samp_predictions.csv",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps_training.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps1Samp_training.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps_confmat.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps1Samp_confmat.png",
        f"{base_dir}/{schema_name}/images/summarized-{schema_name}-rocs.png",
        f"{base_dir}/{schema_name}/images/summarized-{schema_name}-confmat.png",
        f"{base_dir}/{schema_name}/images/summarized-1Samp-{schema_name}-confmat.png",
        f"{base_dir}/{schema_name}/images/{schema_name}.mean.all.png",
        f"{base_dir}/{schema_name}/images/{schema_name}.mean.zoomed.png"

rule createNpzFiles:
    input:
        f"{base_dir}/{{simtype}}"
    output:
        f"{base_dir}/{{simtype}}/hfs_{schema_name}.npz"
    shell:
        f"""
        source activate blinx
        python {config["src_dir"]}/haplotypes.py -i {input} \
            -s {config["sample_size"]} \
            -g {sample_gens} \
            --max_timepoints {config["max_timepoints"]} \
            --schema-name {schema_name}
        """

rule mergeNpzs:
    input:
        expand(
            f"{base_dir}/{{simtype}}/hfs_{schema_name}.npz",
            simtype=SIMTYPES,
        )
    output:
        f"{base_dir}/{schema_name}/{schema_name}.npz"
    shell:
        f"""
        source activate blinx
        python {config["src_dir"]}/merge_npzs.py {base_dir}/{schema_name}/{schema_name}.npz {input}
        """

rule trainModels:
    input:
        f"{base_dir}/{schema_name}/{schema_name}.npz",
    output:
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps_predictions.csv",
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps1Samp_predictions.csv",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps_training.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps1Samp_training.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps_confmat.png",
        f"{base_dir}/{schema_name}/images/{schema_name}_TimeSweeperHaps1Samp_confmat.png"
    shell:
        f"""
        source deactivate
        source activate blinx
        python {config["src_dir"]}/hap_networks.py train -i {input} -n {schema_name}
        """

rule combineResults:
    input:
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps_predictions.csv",
        f"{base_dir}/{schema_name}/{schema_name}_TimeSweeperHaps1Samp_predictions.csv"
    output:
        f"{base_dir}/{schema_name}/images/summarized-{schema_name}-rocs.png",
        f"{base_dir}/{schema_name}/images/summarized-{schema_name}-confmat.png",
        f"{base_dir}/{schema_name}/images/summarized-1Samp-{schema_name}-confmat.png",
    shell:
        f"""
        source activate blinx
        python {config["src_dir"]}/summarize_3class.py {base_dir}/{schema_name}/images {schema_name} {input}
        """

rule plotHaps:
    input:
        f"{base_dir}/{schema_name}/{schema_name}.npz"
    output:
        f"{base_dir}/{schema_name}/images/{schema_name}.mean.all.png",
        f"{base_dir}/{schema_name}/images/{schema_name}.mean.zoomed.png"
    shell:
        f"""
        source deactivate
        source activate blinx
        python {config["src_dir"]}/plotting/plot_hap_spec.py {base_dir}/{schema_name}/{schema_name}.npz
        """